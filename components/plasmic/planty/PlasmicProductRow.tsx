// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ozcq8GxerrF1WYaqjsW34y
// Component: keSq6YDh49oPso

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantssOxgEMpX5WMfyx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: sOxgEMpX5wMfyx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_planty.module.css"; // plasmic-import: ozcq8GxerrF1WYaqjsW34y/projectcss
import sty from "./PlasmicProductRow.module.css"; // plasmic-import: keSq6YDh49oPso/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: le9jVYTVBu1qJc/icon

export type PlasmicProductRow__VariantMembers = {};
export type PlasmicProductRow__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductRow__VariantsArgs;
export const PlasmicProductRow__VariantProps = new Array<VariantPropType>();

export type PlasmicProductRow__ArgsType = {};
type ArgPropType = keyof PlasmicProductRow__ArgsType;
export const PlasmicProductRow__ArgProps = new Array<ArgPropType>();

export type PlasmicProductRow__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultProductRowProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductRow__RenderFunc(props: {
  variants: PlasmicProductRow__VariantsArgs;
  args: PlasmicProductRow__ArgsType;
  overrides: PlasmicProductRow__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssOxgEMpX5WMfyx()
  });

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_library_plasmic_color_type_css.plasmic_tokens,
          sty.root
        )}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column__eG5Zw)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__bncE)}
            displayHeight={"270px /* plasmic-token: ObHWhBbrFxpNMB */" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/planty/images/plant1Featuredjpg.png",
              fullWidth: 400,
              fullHeight: 400,
              aspectRatio: undefined
            }}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__kmaEq)}>
              <Icon3Icon
                className={classNames(projectcss.all, sty.svg__fNh7Y)}
                role={"img"}
              />
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox___0Kx5X)}>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__xMbRl
              )}
              component={Link}
              platform={"nextjs"}
            >
              {"Nulla suscipit "}
            </p.PlasmicLink>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___5DIbe
              )}
            >
              {"bigplants "}
            </div>
            <h5
              className={classNames(
                projectcss.all,
                projectcss.h5,
                projectcss.__wab_text,
                sty.h5__ePbdm
              )}
            >
              {"$49.40 "}
            </h5>
          </div>
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column__xWk5X)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__xs8Zi)}
            displayHeight={"270px /* plasmic-token: ObHWhBbrFxpNMB */" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/planty/images/plant2Featuredjpg.png",
              fullWidth: 400,
              fullHeight: 400,
              aspectRatio: undefined
            }}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__khfRs)}>
              <Icon3Icon
                className={classNames(projectcss.all, sty.svg__zt7Sr)}
                role={"img"}
              />
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__diNlc)}>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__fk7I
              )}
              component={Link}
              platform={"nextjs"}
            >
              {"Integer porta"}
            </p.PlasmicLink>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__r6Rri
              )}
            >
              {"cactuses"}
            </div>
            <h5
              className={classNames(
                projectcss.all,
                projectcss.h5,
                projectcss.__wab_text,
                sty.h5__h3IC7
              )}
            >
              {"$99.00 "}
            </h5>
          </div>
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column__ykRM)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__nXtRk)}
            displayHeight={"270px /* plasmic-token: ObHWhBbrFxpNMB */" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/planty/images/plant5Featuredjpg.png",
              fullWidth: 400,
              fullHeight: 400,
              aspectRatio: undefined
            }}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__algNa)}>
              <Icon3Icon
                className={classNames(projectcss.all, sty.svg__jMc1)}
                role={"img"}
              />
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__qzDjI)}>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__nvMAn
              )}
              component={Link}
              platform={"nextjs"}
            >
              {"Vestibulum eget"}
            </p.PlasmicLink>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___74Jxo
              )}
            >
              {"bigplants "}
            </div>
            <h5
              className={classNames(
                projectcss.all,
                projectcss.h5,
                projectcss.__wab_text,
                sty.h5___6Tv
              )}
            >
              {"$220.00 "}
            </h5>
          </div>
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column___3Ng0K)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__qTeMw)}
            displayHeight={"270px /* plasmic-token: ObHWhBbrFxpNMB */" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/planty/images/plant9Featuredjpg.png",
              fullWidth: 400,
              fullHeight: 400,
              aspectRatio: undefined
            }}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__xiVdy)}>
              <Icon3Icon
                className={classNames(projectcss.all, sty.svg__hp4FW)}
                role={"img"}
              />
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__hp4Nr)}>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__ezfml
              )}
              component={Link}
              platform={"nextjs"}
            >
              {"Fusce sagittis"}
            </p.PlasmicLink>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bqegp
              )}
            >
              {"cactuses"}
            </div>
            <h5
              className={classNames(
                projectcss.all,
                projectcss.h5,
                projectcss.__wab_text,
                sty.h5__yNb6V
              )}
            >
              {"$400.40 "}
            </h5>
          </div>
        </p.Stack>
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductRow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductRow__VariantsArgs;
    args?: PlasmicProductRow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductRow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductRow__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProductRow__ArgProps,
          internalVariantPropNames: PlasmicProductRow__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductRow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductRow";
  } else {
    func.displayName = `PlasmicProductRow.${nodeName}`;
  }
  return func;
}

export const PlasmicProductRow = Object.assign(
  // Top-level PlasmicProductRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicProductRow
    internalVariantProps: PlasmicProductRow__VariantProps,
    internalArgProps: PlasmicProductRow__ArgProps
  }
);

export default PlasmicProductRow;
/* prettier-ignore-end */
